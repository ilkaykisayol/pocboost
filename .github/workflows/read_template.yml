name: Test send mail
on:
    workflow_dispatch: # on demand
        inputs:
            owner:
                description: 'Github username of the environment owner'
                required: true
                type: string
            version:
                description: 'Choose application and environment version'
                required: true
                type: choice
                options: 
                - 'Boost 1.1'
                - 'Boost 1.2'
                default: 'Boost 1.2'
            retention:
                description: 'Choose retention period - environment will be decommissioned after this period'
                required: true
                type: choice
                options: 
                - '1 week'
                - '2 weeks'
                - '4 weeks'
                - '8 weeks'
                - '10 weeks'
                default: '2 weeks'
env:
  CLIENT_ID: ${{ secrets.CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  TENANT_ID: ${{ secrets.TENANT_ID }}
  
jobs:
  params:
      name: Set parameters
      runs-on: ubuntu-latest
      outputs:
          owner: ${{ steps.set-variable.outputs.owner }}
      steps:
        - name: Prepare github username
          shell: bash
          id: replace-username
          run: |
              backstageUserName=${{ inputs.owner }}
              replaceValue="user:default/"   
              echo "username="${backstageUserName//$replaceValue}"" >> "$GITHUB_OUTPUT"
        - name: Check params
          shell: bash
          id: set-variable
          run: |
              echo "owner=${{ steps.replace-username.outputs.username }}" >> "$GITHUB_OUTPUT"
  get_user_email:
    runs-on: ubuntu-latest
    name: A job to get a users email
    needs: params
    outputs:
          email: ${{ steps.find-email.outputs.email }}
    steps:
      - name: Find email
        shell: bash
        id: find-email
        run: |
            # Set the URL of the API endpoint
            url="https://api.github.com/users/${{ needs.params.outputs.owner }}"
            
            # Make the curl request
            response=$(curl -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{secrets.TOKEN}}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              $url)
            echo $response
            # Extract the email value from the response
            email=$(echo $response | jq '.email')
            echo $email
            echo "email=$email" >> "$GITHUB_OUTPUT"
  prepare_mail:
    runs-on: ubuntu-latest
    name: A job to prepare an email
    needs: params
    outputs:
          body: ${{ steps.replace-mail-body.outputs.body }}
    steps:
      - uses: actions/checkout@v2
      - name: Replace HTML File
        id: replace-mail-body
        run: |
          # Read the file content and store it in a variable
          FILE_CONTENT=$(cat ./utils/on-demand-created.html)
          FILE_CONTENT="${FILE_CONTENT//##OWNER##/${{ needs.params.outputs.owner }}}"
          FILE_CONTENT="${FILE_CONTENT//##VERSION##/${{ inputs.version }}}"
          FILE_CONTENT="${FILE_CONTENT//##RETENTION##/${{ inputs.retention }}}"
          echo "body="$FILE_CONTENT"" >> "$GITHUB_OUTPUT"
  send_email:
    if: ${{ needs.get_user_email.outputs.email != null }} 
    runs-on: ubuntu-latest
    name: A job to send an email to user
    needs: [get_user_email, prepare_mail]
    steps:
      - name: Print email
        shell: bash
        id: find-email
        run: |
            echo ${{ needs.get_user_email.outputs.email }}
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install Graph SDK
        run: npm install @azure/identity @azure/graph

      - name: Send Email using Microsoft Graph
        run: |
          // Your Node.js script here to send the email using Microsoft Graph
          // You can use the Microsoft Graph JavaScript SDK to make API calls.
            const { ClientSecretCredential } = require("@azure/identity");
            const { GraphRbacManagementClient } = require("@azure/graph");
            const { DefaultAzureCredential } = require("@azure/identity");
            
            // Define your app and email details
            const clientId = process.env.CLIENT_ID;
            const clientSecret = process.env.CLIENT_SECRET;
            const tenantId = process.env.TENANT_ID;
            const toEmail = "ilkaykisayol@gmail.com";
            const subject = "Test Email";
            const bodyContent = "This is a test email sent using Microsoft Graph API.";
            
            // Create a client credential instance
            const clientCredential = new ClientSecretCredential(tenantId, clientId, clientSecret);
            
            // Create a Graph client
            const graphClient = new GraphRbacManagementClient(clientCredential, {
              baseUri: "https://graph.microsoft.com"
            });
            
            // Compose the email message
            const email = {
              message: {
                subject: subject,
                body: {
                  contentType: "Text",
                  content: bodyContent,
                },
                toRecipients: [
                  {
                    emailAddress: {
                      address: toEmail,
                    },
                  },
                ],
              },
              saveToSentItems: false,
            };
            
            // Send the email using Microsoft Graph API
            (async () => {
              try {
                const response = await graphClient.me.sendMail(email);
                console.log("Email sent:", response);
              } catch (error) {
                console.error("Error sending email:", error);
              }
            })();
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          TENANT_ID: ${{ secrets.TENANT_ID }}
          
