name: Request - Environment - DevOps Sandbox

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

on:
  workflow_dispatch: # on demand
    inputs:
      owner:
        description: 'Github username of the environment owner'
        required: true
        type: string
      version:
        description: 'Choose application and environment version'
        required: true
        type: choice
        options:
          - 'Boost 1.1'
          - 'Boost 1.2'
        default: 'Boost 1.2'
      retention:
        description: 'Choose retention period - environment will be decommissioned after this period'
        required: true
        type: choice
        options:
          - '1 week'
          - '2 weeks'
          - '4 weeks'
          - '8 weeks'
          - '10 weeks'
        default: '2 weeks'

jobs:
  params:
    name: Set parameters
    runs-on: ubuntu-latest
    outputs:
      owner: ${{ steps.set-variable.outputs.owner }}
      aws_role: ${{ steps.set-variable.outputs.aws_role }}
    steps:
      - name: Prepare github username
        shell: bash
        id: replace-username
        run: |
          backstageUserName=${{ inputs.owner }}
          replaceValue="user:default/"   
          echo "username="${backstageUserName//$replaceValue}"" >> "$GITHUB_OUTPUT"
      - name: Check params
        shell: bash
        id: set-variable
        run: |
          AWS_ACCOUNT_ID=703691886976
          echo "aws_role=arn:aws:iam::$AWS_ACCOUNT_ID:role/adm-dmdp-github-actions-build-role" >> $GITHUB_OUTPUT
          echo "owner=${{ steps.replace-username.outputs.username }}" >> "$GITHUB_OUTPUT"
  get_user_email:
    runs-on: ubuntu-latest
    name: A job to get a users email
    needs: params
    outputs:
      email: ${{ steps.find-email.outputs.email }}
    steps:
      - name: Find email
        shell: bash
        id: find-email
        run: |
          # Set the URL of the API endpoint
          url="https://api.github.com/users/${{ needs.params.outputs.owner }}"
          
          # Make the curl request
          response=$(curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{secrets.TEST_TOKEN}}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            $url)
          echo $response
          # Extract the email value from the response
          email=$(echo $response | jq '.email')
          echo $email
          echo "email=$email" >> "$GITHUB_OUTPUT"
  prepare_mail:
    runs-on: ubuntu-latest
    name: Prepare an email
    needs: params
    outputs:
      body: ${{ steps.replace-mail-body.outputs.body }}
    steps:
      - uses: actions/checkout@v2
      - name: Replace HTML File
        id: replace-mail-body
        run: |
          # Read the file content and store it in a variable
          FILE_CONTENT=$(cat ./utils/on-demand-created.html)
          FILE_CONTENT="${FILE_CONTENT//##OWNER##/${{ needs.params.outputs.owner }}}"
          FILE_CONTENT="${FILE_CONTENT//##VERSION##/${{ inputs.version }}}"
          FILE_CONTENT="${FILE_CONTENT//##RETENTION##/${{ inputs.retention }}}"
          echo "body="$FILE_CONTENT"" >> "$GITHUB_OUTPUT"
  send_email:
    runs-on: ubuntu-latest
    name: Send an email to user
    needs: [get_user_email, prepare_mail, params]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ needs.params.outputs.aws_role }}
          role-session-name: backstage-ondemand-${{ github.run_number }}
          aws-region: eu-west-1
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Run send_mail.py script
        run: |
          cd utils
          pip install boto3
          python send_mail.py
        env:
          RECIPIENT_EMAIL: ${{ needs.get_user_email.outputs.email }}
          EMAIL_SUBJECT: "On-Demand Environment Creation"
          EMAIL_BODY: ${{ needs.prepare_mail.outputs.body }}
